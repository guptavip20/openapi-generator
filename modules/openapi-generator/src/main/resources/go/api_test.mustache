/*
{{#appName}}
{{{.}}}
{{/appName}}

Testing {{classname}}Service

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package test

import (
	"context"
	"testing"

	glp_context "github.com/glcp/common-sdk-go/pkg/auth"
	"github.com/{{gitUserId}}/{{gitRepoId}}/pkg/client"
	config "github.com/glcp/common-sdk-go/pkg/config"
	"github.com/{{gitUserId}}/{{gitRepoId}}/services/{{packageName}}"
	openapiclient "github.com/{{gitUserId}}/{{gitRepoId}}/services/{{packageName}}"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	
)

func Test_{{packageName}}_{{classname}}Service(t *testing.T) {
	
	cfg := config.NewConfiguration()
	cfg.Debug = true
	apiClient := config.NewAPIClient(cfg)

    apiService := {{packageName}}.New{{classname}}Service(apiClient)
	serviceAPI := apiService

	ctx, err := glp_context.ConfigureContext()
	if err != nil {
		panic(err)
	}

	var {{paramName}} {{dataType}}

{{#operations}}
{{#operation}}
	t.Run("Test {{classname}}Service {{{nickname}}}", func(t *testing.T) {

		{{^pathParams}}
		t.Skip("skip test")  // remove to run test
		{{/pathParams}}
		{{#pathParams}}
		{{#-first}}
		t.Skip("skip test")  // remove to run test
		{{/-first}}
		var {{paramName}} {{{dataType}}}
		{{/pathParams}}

		request := serviceAPI.{{operationId}}(ctx)
		{{#bodyParam}}
		request = request.{{paramName}}({{{dataType}}}{
			{{#vars}}
        	{{name}}: {{#value}}{{value}}{{/value}}{{^value}}"dummy_value"{{/value}},
        	{{/vars}}
		})
		{{/bodyParam}}
		{{#returnType}}resp, {{/returnType}}httpRes, err := request.ApiService.Execute()


		{{#returnType}}resp, {{/returnType}}httpRes, err := apiClient.{{classname}}.{{operationId}}(context.Background(){{#pathParams}}, {{paramName}}{{/pathParams}}).Execute()

		require.Nil(t, err)
		{{#returnType}}
		require.NotNil(t, resp)
		{{/returnType}}
		assert.Equal(t, 200, httpRes.StatusCode)

	})

{{/operation}}
{{/operations}}
}
IService PatchPets", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PetsAPI.PatchPets(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PetsAPIService UpdatePet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var petId string

		resp, httpRes, err := apiClient.PetsAPI.UpdatePet(context.Background(), petId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
